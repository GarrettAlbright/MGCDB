@startuml
class Config {
  TomlParseResult config
  Config()
  String get()
}

class Escape {
  {static} String html()
  {static} String url()
}

class StatusCodes {
  {static} int NO_TASK_HANDLER
  {static} int BAD_TASK_PARAM
  {static} int TEST_INIT_ERROR
  {static} int GENERAL_SQL_ERROR
  {static} int NO_DB_FILE
  {static} int NO_CONFIG_FILE
  {static} int CONFIG_FILE_CANT_BE_PARSED
  {static} int REQUIRED_CONFIG_PARAM_MISSING
  {static} int GENERAL_OUTGOING_NETWORK_ERROR
  {static} int URI_BUILDING_FAILED
  {static} int MOCK_RESPONSE_FAILED
  {static} int GENERAL_OPENID_ERROR
  {static} int GENERAL_ESCAPING_ERROR
}

class PagedQueryResult<T> {
  int totalResults
  int perPage
  int currentPageZeroBased
  T[] results
  PagedQueryResult PagedQueryResult()
  int getTotalPages()
  int getCurrentPageOneBased()
}

class DBCXN {
  Connection cxn
  Connection readOnlyCxn
  String path
  void init()
  void initReadOnlyCxn()
  Connection getCxn()
  Connection getReadOnlyCxn()
  void createIfNotExists()
  void delete()
  Date parseTimestamp()
  int doInsertQuery()
  void doUpdateQuery()
  ResultSet doSelectQuery()
  int getSingleIntResult()
  int doInsertOrUpdateQuery()
  PreparedStatement prepareStatement()
  void initializeDb()
  Map<String, String> getCurrentCreateQueries()
}

class SteamCxn {
  String logDir
  String steamKey
  String userAgentString
  SteamCxn SteamCxn()
  Game[] getNewGames()
  GetAppDetailsApp getUpdatedGameDetails()
  Game.GamePropStatus getCatalinaStatus()
  PlayerSummary getUserInfo()
  int[] getOwnedGamesInSteam()
  URI buildApiUri()
  <T> makeRequestAndReturnBean()
  String fetchRawResponseBody()
  String uriToLogFilename()
}

class Tasks {
  void invoke()
  void initDb()
  void newGames()
  void updateGames()
  void updateGame()
  void updateDb()
  void updateOwnership()
}
@enduml
